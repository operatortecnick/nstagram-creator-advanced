#!/usr/bin/env python3
"""
Exemplo de Uso B√°sico - Instagram Creator Advanced
Este exemplo demonstra o uso b√°sico e seguro do sistema
"""

import asyncio
import logging
from pathlib import Path
import sys

# Adicionar diret√≥rio pai ao path para importar o m√≥dulo
sys.path.append(str(Path(__file__).parent.parent))

from instagram_creator import InstagramCreatorAdvanced, AccountData

# Configurar logging para o exemplo
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

async def exemplo_criacao_simples():
    """Exemplo de cria√ß√£o de uma √∫nica conta"""
    print("ü§ñ Exemplo: Cria√ß√£o Simples de Conta")
    print("=" * 50)
    
    try:
        # Inicializar o criador
        creator = InstagramCreatorAdvanced("config_default.ini")
        
        # Criar uma conta com dados aleat√≥rios
        print("üöÄ Criando conta com dados aleat√≥rios...")
        result = await creator.create_account()
        
        if result.success:
            print("‚úÖ Sucesso! Conta criada:")
            print(f"   üë§ Username: {result.account_data.username}")
            print(f"   üìß Email: {result.account_data.email}")
            print(f"   üîë Password: {result.account_data.password}")
            print(f"   üë• Nome: {result.account_data.full_name}")
            print(f"   ‚è±Ô∏è  Tempo: {result.creation_time:.2f}s")
        else:
            print(f"‚ùå Falha na cria√ß√£o: {result.error_message}")
            
    except Exception as e:
        logger.error(f"Erro no exemplo: {e}")

async def exemplo_dados_customizados():
    """Exemplo com dados personalizados"""
    print("\nüéØ Exemplo: Dados Personalizados")
    print("=" * 50)
    
    try:
        creator = InstagramCreatorAdvanced()
        
        # Criar dados personalizados
        dados_customizados = AccountData(
            username="meuusuario123",
            email="meuusuario123@gmail.com",
            password="MinhaSenh@123",
            full_name="Jo√£o Silva",
            bio="Desenvolvedor Python"
        )
        
        print("üé® Criando conta com dados personalizados...")
        result = await creator.create_account(dados_customizados)
        
        if result.success:
            print("‚úÖ Conta personalizada criada com sucesso!")
        else:
            print(f"‚ùå Erro: {result.error_message}")
            
    except Exception as e:
        logger.error(f"Erro no exemplo: {e}")

async def exemplo_com_validacao():
    """Exemplo com valida√ß√£o de dados"""
    print("\nüîç Exemplo: Com Valida√ß√£o")
    print("=" * 50)
    
    def validar_resultado(result):
        """Valida resultado da cria√ß√£o"""
        if not result.success:
            return False, f"Cria√ß√£o falhou: {result.error_message}"
        
        if not result.account_data:
            return False, "Dados da conta n√£o encontrados"
        
        # Valida√ß√µes b√°sicas
        if len(result.account_data.username) < 3:
            return False, "Username muito curto"
        
        if "@" not in result.account_data.email:
            return False, "Email inv√°lido"
        
        if len(result.account_data.password) < 8:
            return False, "Senha muito simples"
        
        return True, "Valida√ß√£o bem-sucedida"
    
    try:
        creator = InstagramCreatorAdvanced()
        
        print("üîÑ Criando e validando conta...")
        result = await creator.create_account()
        
        # Validar resultado
        valido, mensagem = validar_resultado(result)
        
        if valido:
            print(f"‚úÖ {mensagem}")
            print(f"   üìä Dados v√°lidos para: {result.account_data.username}")
        else:
            print(f"‚ùå {mensagem}")
            
    except Exception as e:
        logger.error(f"Erro no exemplo: {e}")

async def exemplo_tratamento_erros():
    """Exemplo de tratamento robusto de erros"""
    print("\nüõ°Ô∏è  Exemplo: Tratamento de Erros")
    print("=" * 50)
    
    creator = InstagramCreatorAdvanced()
    max_tentativas = 3
    
    for tentativa in range(1, max_tentativas + 1):
        print(f"üîÑ Tentativa {tentativa}/{max_tentativas}")
        
        try:
            result = await creator.create_account()
            
            if result.success:
                print("‚úÖ Sucesso na cria√ß√£o!")
                break
            else:
                print(f"‚ö†Ô∏è  Falha: {result.error_message}")
                
                if tentativa < max_tentativas:
                    print("‚è≥ Aguardando antes da pr√≥xima tentativa...")
                    await asyncio.sleep(5)
                    
        except Exception as e:
            print(f"‚ùå Erro cr√≠tico: {e}")
            
            if tentativa < max_tentativas:
                print("üîÑ Tentando novamente...")
                await asyncio.sleep(10)
    else:
        print("‚ùå Todas as tentativas falharam")

async def exemplo_configuracao_personalizada():
    """Exemplo com configura√ß√£o personalizada"""
    print("\n‚öôÔ∏è Exemplo: Configura√ß√£o Personalizada")
    print("=" * 50)
    
    import configparser
    
    # Criar configura√ß√£o personalizada
    config = configparser.ConfigParser()
    config.read_string("""
[BROWSER]
headless = true
window_size = 1366,768

[DELAYS]
min_delay = 1
max_delay = 3
typing_delay = 0.05

[ACCOUNT_GENERATION]
username_prefix = exemplo
email_domain = @teste.com
password_length = 10
""")
    
    # Salvar configura√ß√£o tempor√°ria
    with open("config_exemplo.ini", "w") as f:
        config.write(f)
    
    try:
        # Usar configura√ß√£o personalizada
        creator = InstagramCreatorAdvanced("config_exemplo.ini")
        
        print("‚ö° Criando conta com configura√ß√£o r√°pida...")
        result = await creator.create_account()
        
        if result.success:
            print("‚úÖ Configura√ß√£o personalizada funcionou!")
            print(f"   Username gerado: {result.account_data.username}")
        
    finally:
        # Limpar arquivo tempor√°rio
        import os
        if os.path.exists("config_exemplo.ini"):
            os.remove("config_exemplo.ini")

async def main():
    """Fun√ß√£o principal que executa todos os exemplos"""
    print("üìö Instagram Creator Advanced - Exemplos B√°sicos")
    print("=" * 70)
    
    exemplos = [
        ("Cria√ß√£o Simples", exemplo_criacao_simples),
        ("Dados Customizados", exemplo_dados_customizados),
        ("Com Valida√ß√£o", exemplo_com_validacao),
        ("Tratamento de Erros", exemplo_tratamento_erros),
        ("Configura√ß√£o Personalizada", exemplo_configuracao_personalizada)
    ]
    
    for nome, funcao in exemplos:
        try:
            print(f"\nüéØ Executando: {nome}")
            await funcao()
            print(f"‚úÖ {nome} conclu√≠do")
        except KeyboardInterrupt:
            print(f"\n‚ùå Interrompido pelo usu√°rio")
            break
        except Exception as e:
            print(f"‚ùå Erro em {nome}: {e}")
            continue
    
    print("\nüéâ Exemplos b√°sicos conclu√≠dos!")
    print("üí° Pr√≥ximo passo: Explore os exemplos avan√ßados")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüëã Finalizado pelo usu√°rio")
    except Exception as e:
        print(f"\nüí• Erro fatal: {e}")
        sys.exit(1)
